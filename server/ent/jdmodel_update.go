// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/kallydev/privacy/ent/jdmodel"
	"github.com/kallydev/privacy/ent/predicate"
)

// JDModelUpdate is the builder for updating JDModel entities.
type JDModelUpdate struct {
	config
	hooks    []Hook
	mutation *JDModelMutation
}

// Where adds a new predicate for the builder.
func (jmu *JDModelUpdate) Where(ps ...predicate.JDModel) *JDModelUpdate {
	jmu.mutation.predicates = append(jmu.mutation.predicates, ps...)
	return jmu
}

// SetName sets the name field.
func (jmu *JDModelUpdate) SetName(s string) *JDModelUpdate {
	jmu.mutation.SetName(s)
	return jmu
}

// SetNickname sets the nickname field.
func (jmu *JDModelUpdate) SetNickname(s string) *JDModelUpdate {
	jmu.mutation.SetNickname(s)
	return jmu
}

// SetPassword sets the password field.
func (jmu *JDModelUpdate) SetPassword(s string) *JDModelUpdate {
	jmu.mutation.SetPassword(s)
	return jmu
}

// SetEmail sets the email field.
func (jmu *JDModelUpdate) SetEmail(s string) *JDModelUpdate {
	jmu.mutation.SetEmail(s)
	return jmu
}

// SetIDNumber sets the id_number field.
func (jmu *JDModelUpdate) SetIDNumber(s string) *JDModelUpdate {
	jmu.mutation.SetIDNumber(s)
	return jmu
}

// SetPhoneNumber sets the phone_number field.
func (jmu *JDModelUpdate) SetPhoneNumber(i int64) *JDModelUpdate {
	jmu.mutation.ResetPhoneNumber()
	jmu.mutation.SetPhoneNumber(i)
	return jmu
}

// AddPhoneNumber adds i to phone_number.
func (jmu *JDModelUpdate) AddPhoneNumber(i int64) *JDModelUpdate {
	jmu.mutation.AddPhoneNumber(i)
	return jmu
}

// Mutation returns the JDModelMutation object of the builder.
func (jmu *JDModelUpdate) Mutation() *JDModelMutation {
	return jmu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (jmu *JDModelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(jmu.hooks) == 0 {
		affected, err = jmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JDModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			jmu.mutation = mutation
			affected, err = jmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(jmu.hooks) - 1; i >= 0; i-- {
			mut = jmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (jmu *JDModelUpdate) SaveX(ctx context.Context) int {
	affected, err := jmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jmu *JDModelUpdate) Exec(ctx context.Context) error {
	_, err := jmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jmu *JDModelUpdate) ExecX(ctx context.Context) {
	if err := jmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jmu *JDModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jdmodel.Table,
			Columns: jdmodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jdmodel.FieldID,
			},
		},
	}
	if ps := jmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jmu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jdmodel.FieldName,
		})
	}
	if value, ok := jmu.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jdmodel.FieldNickname,
		})
	}
	if value, ok := jmu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jdmodel.FieldPassword,
		})
	}
	if value, ok := jmu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jdmodel.FieldEmail,
		})
	}
	if value, ok := jmu.mutation.IDNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jdmodel.FieldIDNumber,
		})
	}
	if value, ok := jmu.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: jdmodel.FieldPhoneNumber,
		})
	}
	if value, ok := jmu.mutation.AddedPhoneNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: jdmodel.FieldPhoneNumber,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jdmodel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// JDModelUpdateOne is the builder for updating a single JDModel entity.
type JDModelUpdateOne struct {
	config
	hooks    []Hook
	mutation *JDModelMutation
}

// SetName sets the name field.
func (jmuo *JDModelUpdateOne) SetName(s string) *JDModelUpdateOne {
	jmuo.mutation.SetName(s)
	return jmuo
}

// SetNickname sets the nickname field.
func (jmuo *JDModelUpdateOne) SetNickname(s string) *JDModelUpdateOne {
	jmuo.mutation.SetNickname(s)
	return jmuo
}

// SetPassword sets the password field.
func (jmuo *JDModelUpdateOne) SetPassword(s string) *JDModelUpdateOne {
	jmuo.mutation.SetPassword(s)
	return jmuo
}

// SetEmail sets the email field.
func (jmuo *JDModelUpdateOne) SetEmail(s string) *JDModelUpdateOne {
	jmuo.mutation.SetEmail(s)
	return jmuo
}

// SetIDNumber sets the id_number field.
func (jmuo *JDModelUpdateOne) SetIDNumber(s string) *JDModelUpdateOne {
	jmuo.mutation.SetIDNumber(s)
	return jmuo
}

// SetPhoneNumber sets the phone_number field.
func (jmuo *JDModelUpdateOne) SetPhoneNumber(i int64) *JDModelUpdateOne {
	jmuo.mutation.ResetPhoneNumber()
	jmuo.mutation.SetPhoneNumber(i)
	return jmuo
}

// AddPhoneNumber adds i to phone_number.
func (jmuo *JDModelUpdateOne) AddPhoneNumber(i int64) *JDModelUpdateOne {
	jmuo.mutation.AddPhoneNumber(i)
	return jmuo
}

// Mutation returns the JDModelMutation object of the builder.
func (jmuo *JDModelUpdateOne) Mutation() *JDModelMutation {
	return jmuo.mutation
}

// Save executes the query and returns the updated entity.
func (jmuo *JDModelUpdateOne) Save(ctx context.Context) (*JDModel, error) {
	var (
		err  error
		node *JDModel
	)
	if len(jmuo.hooks) == 0 {
		node, err = jmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JDModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			jmuo.mutation = mutation
			node, err = jmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(jmuo.hooks) - 1; i >= 0; i-- {
			mut = jmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (jmuo *JDModelUpdateOne) SaveX(ctx context.Context) *JDModel {
	node, err := jmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jmuo *JDModelUpdateOne) Exec(ctx context.Context) error {
	_, err := jmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jmuo *JDModelUpdateOne) ExecX(ctx context.Context) {
	if err := jmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jmuo *JDModelUpdateOne) sqlSave(ctx context.Context) (_node *JDModel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jdmodel.Table,
			Columns: jdmodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jdmodel.FieldID,
			},
		},
	}
	id, ok := jmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing JDModel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := jmuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jdmodel.FieldName,
		})
	}
	if value, ok := jmuo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jdmodel.FieldNickname,
		})
	}
	if value, ok := jmuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jdmodel.FieldPassword,
		})
	}
	if value, ok := jmuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jdmodel.FieldEmail,
		})
	}
	if value, ok := jmuo.mutation.IDNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jdmodel.FieldIDNumber,
		})
	}
	if value, ok := jmuo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: jdmodel.FieldPhoneNumber,
		})
	}
	if value, ok := jmuo.mutation.AddedPhoneNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: jdmodel.FieldPhoneNumber,
		})
	}
	_node = &JDModel{config: jmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, jmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jdmodel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
