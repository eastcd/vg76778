// Code generated by entc, DO NOT EDIT.

package qqmodel

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/kallydev/privacy/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// QqNumber applies equality check predicate on the "qq_number" field. It's identical to QqNumberEQ.
func QqNumber(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQqNumber), v))
	})
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// QqNumberEQ applies the EQ predicate on the "qq_number" field.
func QqNumberEQ(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQqNumber), v))
	})
}

// QqNumberNEQ applies the NEQ predicate on the "qq_number" field.
func QqNumberNEQ(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQqNumber), v))
	})
}

// QqNumberIn applies the In predicate on the "qq_number" field.
func QqNumberIn(vs ...int64) predicate.QQModel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QQModel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQqNumber), v...))
	})
}

// QqNumberNotIn applies the NotIn predicate on the "qq_number" field.
func QqNumberNotIn(vs ...int64) predicate.QQModel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QQModel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQqNumber), v...))
	})
}

// QqNumberGT applies the GT predicate on the "qq_number" field.
func QqNumberGT(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQqNumber), v))
	})
}

// QqNumberGTE applies the GTE predicate on the "qq_number" field.
func QqNumberGTE(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQqNumber), v))
	})
}

// QqNumberLT applies the LT predicate on the "qq_number" field.
func QqNumberLT(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQqNumber), v))
	})
}

// QqNumberLTE applies the LTE predicate on the "qq_number" field.
func QqNumberLTE(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQqNumber), v))
	})
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...int64) predicate.QQModel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QQModel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...int64) predicate.QQModel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QQModel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v int64) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhoneNumber), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.QQModel) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.QQModel) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QQModel) predicate.QQModel {
	return predicate.QQModel(func(s *sql.Selector) {
		p(s.Not())
	})
}
